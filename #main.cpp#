#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

enum Lexema
{
    DOLLAR_SIGN,
    EQUAL_SIGN,
    OPEN_BRACE,
    CLOSE_BRACE,
    STRING,
    NAME
};

struct Token
{
    Lexema type;
    string value;
};

enum State
{
    INSIDE_QUOTATION_MARKS,
    OUTSIDE_QUOTATION_MARKS,
    NAME_S,
    WAITING
};

class LexAnalizer
{
public:
    LexAnalizer();
    void parse(string input);
    void dollarSign();
    void beginningCurlyBrac();
    void endingCurlyBrac();

    void beginningUnquotatedString();
    void continueUnquotatedString();
    void endUnquotatedString();

    void beginningQuotationMarks();
    void continueQuotationMarks();
    void endingQuotationMarks();

    void beginningName();
    void continueName();
    void endName();

    void equalSign();
    void whitespace();
    vector<Token> getResult();
private:
    State currentState;
    int argc;
    vector<Token> argv;
    string buffer;
    char currentChar;
    map<pair<char, State>, void(LexAnalizer::*)()> functions;
};

LexAnalizer::LexAnalizer()
{
    for (int c = 0; c < 256; ++c)
    {
        functions[make_pair(c, State::INSIDE_QUOTATION_MARKS)] = &LexAnalizer::continueQuotationMarks;
        functions[make_pair(c, State::OUTSIDE_QUOTATION_MARKS)] = &LexAnalizer::continueUnquotatedString;
        if (isalpha(c))
            functions[make_pair(c, State::WAITING)] = &LexAnalizer::beginningName;
        else
            functions[make_pair(c, State::WAITING)] = &LexAnalizer::beginningUnquotatedString;
        if (isalnum(c))
            functions[make_pair(c, State::NAME_S)] = &LexAnalizer::continueName;
        else
            functions[make_pair(c, State::NAME_S)] = &LexAnalizer::beginningUnquotatedString;
    }

    // Special characters //
    functions[make_pair('\"', State::INSIDE_QUOTATION_MARKS)] = &LexAnalizer::endingQuotationMarks;
    functions[make_pair('\"', State::OUTSIDE_QUOTATION_MARKS)] = &LexAnalizer::beginningQuotationMarks;
    functions[make_pair('\"', State::NAME_S)] = &LexAnalizer::beginningQuotationMarks;
    functions[make_pair('\"', State::WAITING)] = &LexAnalizer::beginningQuotationMarks;

    functions[make_pair('\0', State::INSIDE_QUOTATION_MARKS)] = &LexAnalizer::endingQuotationMarks;
    functions[make_pair('\0', State::OUTSIDE_QUOTATION_MARKS)] = &LexAnalizer::endUnquotatedString;
    functions[make_pair('\0', State::NAME_S)] = &LexAnalizer::endName;
    functions[make_pair('\0', State::WAITING)] = &LexAnalizer::whitespace;

    functions[make_pair(' ', State::OUTSIDE_QUOTATION_MARKS)] = &LexAnalizer::endUnquotatedString;
    functions[make_pair(' ', State::NAME_S)] = &LexAnalizer::endName;
    functions[make_pair(' ', State::WAITING)] = &LexAnalizer::whitespace;

    functions[make_pair('$', State::OUTSIDE_QUOTATION_MARKS)] = &LexAnalizer::dollarSign;
    functions[make_pair('$', State::NAME_S)] = &LexAnalizer::dollarSign;
    functions[make_pair('$', State::WAITING)] = &LexAnalizer::dollarSign;

    functions[make_pair('{', State::OUTSIDE_QUOTATION_MARKS)] = &LexAnalizer::beginningCurlyBrac;
    functions[make_pair('{', State::NAME_S)] = &LexAnalizer::beginningCurlyBrac;
    functions[make_pair('{', State::WAITING)] = &LexAnalizer::beginningCurlyBrac;

    functions[make_pair('}', State::OUTSIDE_QUOTATION_MARKS)] = &LexAnalizer::endingCurlyBrac;
    functions[make_pair('}', State::NAME_S)] = &LexAnalizer::endingCurlyBrac;
    functions[make_pair('}', State::WAITING)] = &LexAnalizer::endingCurlyBrac;

    functions[make_pair('=', State::NAME_S)] = &LexAnalizer::equalSign;
    //~~~~~~~~~~~~~~~~~~~~//
}

void LexAnalizer::parse(string input)
{
    // refresh values  //
    currentState = State::WAITING;
    argc = 0;
    argv.clear();
    buffer.clear();
    //~~~~~~~~~~~~~~~~~//
    for (size_t i = 0; i <= input.length(); ++i) // with '\0'
    {
        currentChar = input[i];
        (*this.*functions[make_pair(currentChar, currentState)])();
    }
}

vector<Token> LexAnalizer::getResult()
{
    return argv;
}

void LexAnalizer::dollarSign()
{
    if (!buffer.empty())
    {
        if (currentState == State::NAME_S)
            argv.push_back({Lexema::NAME, buffer});
        else
            argv.push_back({Lexema::STRING, buffer});
        argc++;
        buffer.clear();
    }
    currentState = State::WAITING;
    argv.push_back({ Lexema::DOLLAR_SIGN, "$" });
}

void LexAnalizer::beginningCurlyBrac()
{
    if (!buffer.empty())
    {
        if (currentState == State::NAME_S)
            argv.push_back({Lexema::NAME, buffer});
        else
            argv.push_back({Lexema::STRING, buffer});
        argc++;
        buffer.clear();
    }
    currentState = State::WAITING;
    argv.push_back({ Lexema::OPEN_BRACE, "{" });
}

void LexAnalizer::endingCurlyBrac()
{
    if (!buffer.empty())
    {
        if (currentState == State::NAME_S)
            argv.push_back({Lexema::NAME, buffer});
        else
            argv.push_back({Lexema::STRING, buffer});
        argc++;
        buffer.clear();
    }
    currentState = State::WAITING;
    argv.push_back({ Lexema::CLOSE_BRACE, "}" });
}

void LexAnalizer::equalSign()
{
    if (!buffer.empty())
    {
        if (currentState == State::NAME_S)
            argv.push_back({Lexema::NAME, buffer});
        else
            argv.push_back({Lexema::STRING, buffer});
        argc++;
        buffer.clear();
    }
    currentState = State::WAITING;
    argv.push_back({ Lexema::EQUAL_SIGN, "=" });
}

void LexAnalizer::beginningQuotationMarks()
{
    currentState = State::INSIDE_QUOTATION_MARKS;
}

void LexAnalizer::continueQuotationMarks()
{
    buffer += currentChar;
}

void LexAnalizer::endingQuotationMarks()
{
    currentState = State::WAITING;
    argv.push_back({Lexema::STRING, buffer});
    argc++;
    buffer.clear();
}

void LexAnalizer::beginningName()
{
    currentState = State::NAME_S;
    buffer += currentChar;
}

void LexAnalizer::continueName()
{
    buffer += currentChar;
}

void LexAnalizer::endName()
{
    argv.push_back({Lexema::NAME, buffer});
    argc++;
    buffer.clear();
    currentState = State::WAITING;
}

void LexAnalizer::beginningUnquotatedString()
{
    currentState = State::OUTSIDE_QUOTATION_MARKS;
    buffer += currentChar;
}

void LexAnalizer::continueUnquotatedString()
{
    buffer += currentChar;
}

void LexAnalizer::endUnquotatedString()
{
    currentState = State::WAITING;
    argv.push_back({Lexema::STRING, buffer});
    argc++;
    buffer.clear();
}


void LexAnalizer::whitespace()
{
    // does nothing intentionally
}

int main()
{
    LexAnalizer analizer;
    analizer.parse("4ll$HELLLL   42   \"co ck\"   co ck \"${${A}\" 7777 $4141    1515{   } ");
    vector<Token> tokens = analizer.getResult();
    for (size_t i = 0; i < tokens.size(); ++i)
    {
        cout << "Type: " <<tokens[i].type << " Value: "<< tokens[i].value << endl;
    }

    State st = State::WAITING;
    cout << st << endl;
    st = State::OUTSIDE_QUOTATION_MARKS;
    cout << st << endl;
}


